import { WebPlugin } from '@capacitor/core';
import { AddAllItemOptions, AddItemOptions, PlayByIdOptions, PlayByIndexOptions, PlaylistOptions, PlaylistPlugin, RemoveItemOptions, RemoveItemsOptions, SeekToOptions, SelectByIdOptions, SelectByIndexOptions, SetLoopOptions, SetPlaybackVolumeOptions, SetPlaybackRateOptions } from './definitions';
import { AudioTrack, AudioPlayerOptions } from "./interfaces";
export declare class PlaylistWeb extends WebPlugin implements PlaylistPlugin {
    protected audio: HTMLVideoElement | undefined;
    protected playlistItems: AudioTrack[];
    protected loop: boolean;
    protected options: AudioPlayerOptions;
    protected currentTrack: AudioTrack | null;
    protected lastState: string;
    constructor();
    addAllItems(options: AddAllItemOptions): Promise<void>;
    addItem(options: AddItemOptions): Promise<void>;
    clearAllItems(): Promise<void>;
    initialize(): Promise<void>;
    pause(): Promise<void>;
    play(): Promise<void>;
    playTrackById(options: PlayByIdOptions): Promise<void>;
    playTrackByIndex(options: PlayByIndexOptions): Promise<void>;
    release(): Promise<void>;
    removeItem(options: RemoveItemOptions): Promise<void>;
    removeItems(options: RemoveItemsOptions): Promise<void>;
    seekTo(options: SeekToOptions): Promise<void>;
    selectTrackById(options: SelectByIdOptions): Promise<void>;
    selectTrackByIndex(options: SelectByIndexOptions): Promise<void>;
    setLoop(options: SetLoopOptions): Promise<void>;
    setOptions(options: AudioPlayerOptions): Promise<void>;
    setPlaybackVolume(options: SetPlaybackVolumeOptions): Promise<void>;
    setPlaylistItems(options: PlaylistOptions): Promise<void>;
    skipForward(): Promise<void>;
    skipBack(): Promise<void>;
    setPlaybackRate(options: SetPlaybackRateOptions): Promise<void>;
    registerHtmlListeners(position?: number): void;
    protected getCurrentTrackId(): string | undefined;
    protected getCurrentIndex(): number;
    protected getCurrentTrackStatus(currentState: string): {
        trackId: string | undefined;
        isStream: boolean;
        currentIndex: number;
        status: string;
        currentPosition: number | undefined;
    };
    protected setCurrent(item: AudioTrack, position?: number): Promise<void>;
    protected log(message?: any, ...optionalParams: any[]): void;
    private hlsLoaded;
    protected loadHlsJs(): Promise<unknown>;
}
declare const Playlist: PlaylistWeb;
export { Playlist };
